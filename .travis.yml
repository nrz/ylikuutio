env:
    global:
        # following Coverity instructions
        # https://scan.coverity.com/travis_ci
        - secure: "fE61u9/Qtn2jXo+ReUFdscmLAYMxOa3Rbvj3LMlRR6dV7tZf6arJJGYxklABKGQi5qMkYgcOY0rUqaOfvo/rPcIKNmlqZ1rz/nBZnvmvG8AKY6rtKKD0TUMphU3IzO2pXW4OywNNEaf8ze1iycB/wpZoBRNcuNev0BRiM8CiExV144abSLZu5vHNXXb9Rnfbn19yQCWdl5cnJlO+m+GQBQDjYCbYIToF6pr2D16qo8PPncYGs2GgdOci4aFs/+nFZS/NHULCafQIGk7tyQg3vq2Tpwi2dTshtfz/Y4JII4DlSFicoer55u2G4ML+9HaufaoFs4aaLROmNrtCbc6WI0upnlsSWlrGsFk2G3UBxopqGoQhmHVi0PYItOhOejz1YEpm4sCSUChrc5DKnmPgL/HXQQ5+/l+3ST9nZn6sZ4fJlwqe57U0e4M1me0hBXHr1t19/g40HAsFVLf7oxP4mpTdFOEF7DceEo5cZYEeiMW5T4gogeWmQjcckTmyHlly0unAyuQKrgCeOsL5Uks6E8TssQMewLp9ZGAMt7W8k7jcmtZpgKYBaf/MQdeICkoGgGg3XJpZSgATGNSzG3IwlNQxjvbteqNfle+kwaurgUGQT8KCnkrvRGvhPwJ0EkOxLj7wb7Ngrni4vldv9Uh9jQ5CWw2i7m/UN0pYV1Klb4Q="

language: cpp

os: linux

dist: bionic

sudo: required

install:
    - echo "Hello from install stage"

jobs:
    include:
        # Coverity Scan job should be first one for two reasons:
        # 1. to get it running as soon as possible
        # 2. if Coverity Scan Job is not first, then the expression
        # `${TRAVIS_JOB_NUMBER##*.} = 1` should be modified accordingly.
        - name: "GCC native compiler with Coverity Scan"
          before_install:
              - echo "Hello from before_install stage"
              - test ${TRAVIS_BRANCH} != coverity_scan -o ${TRAVIS_JOB_NUMBER##*.} = 1 || exit 0
              - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-
          compiler: gcc
          addons:
              # following Coverity instructions
              # https://scan.coverity.com/travis_ci
              coverity_scan:
                  project:
                      name: nrz/ylikuutio
                      version: 0.0.8
                      description: Ylikuutio 3D engine. Build submitted via Travis CI
                      notification_email: antti.nuortimo@gmail.com
                      build_command_prepend: mkdir build_coverity && cd build_coverity && cmake ..
                      build_command: make -j 4
                      branch_pattern: coverity_scan
              apt:
                  packages:
                      - cmake
                      - git
                      - libx11-dev
                      - libgl1-mesa-dev
                      - libglu1-mesa-dev
                      - libsdl2-dev
                      - libxcursor-dev
                      - libxrandr-dev
                      - libxext-dev
                      - libxi-dev
                      - libxinerama-dev
                      - make
                      - zlib1g-dev
          branches:
              only:
                  - coverity_scan
          script:
              - test ${TRAVIS_BRANCH} != coverity_scan -o ${TRAVIS_JOB_NUMBER##*.} = 1 || exit 0
              - gcc -v && g++ -v
              - mkdir build_native
              - cd build_native
              - echo "Running cmake for GCC native compiler with Coverity Scan"
              - cmake .. -DDO_UNIT_TESTS_WITH_GOOGLE_TEST=true
              - make -j 4
              - ./unit_tests_with_googletest
        - name: "GCC native compiler"
          before_install:
              - echo "Hello from before_install stage"
          compiler: gcc
          addons:
              apt:
                  packages:
                      - cmake
                      - git
                      - libx11-dev
                      - libgl1-mesa-dev
                      - libglu1-mesa-dev
                      - libsdl2-dev
                      - libxcursor-dev
                      - libxrandr-dev
                      - libxext-dev
                      - libxi-dev
                      - libxinerama-dev
                      - make
                      - zlib1g-dev
          branches:
              only:
                  - master
          script:
              - gcc -v && g++ -v
              - mkdir build_native
              - cd build_native
              - echo "Running cmake for GCC native compiler"
              - cmake .. -DDO_UNIT_TESTS_WITH_GOOGLE_TEST=true
              - make -j 4
              - ./unit_tests_with_googletest
        - name: "Clang native compiler"
          before_install:
              - echo "Hello from before_install stage"
          compiler: clang
          addons:
              apt:
                  packages:
                      - cmake
                      - git
                      - libx11-dev
                      - libgl1-mesa-dev
                      - libglu1-mesa-dev
                      - libsdl2-dev
                      - libxcursor-dev
                      - libxrandr-dev
                      - libxext-dev
                      - libxi-dev
                      - libxinerama-dev
                      - make
                      - zlib1g-dev
          branches:
              only:
                  - master
          script:
              - clang -v && clang++ -v
              - mkdir build_native
              - cd build_native
              - echo "Running cmake for Clang native compiler"
              - cmake .. -DDO_UNIT_TESTS_WITH_GOOGLE_TEST=true
              - make -j 4
              - ./unit_tests_with_googletest
        - name: "MinGW-w64 GCC cross compiler"
          before_install:
              - echo "Hello from before_install stage"
          compiler: gcc
          addons:
              apt:
                  packages:
                      - cmake
                      - git
                      - libx11-dev
                      - libgl1-mesa-dev
                      - libglu1-mesa-dev
                      - libsdl2-dev
                      - libxcursor-dev
                      - libxrandr-dev
                      - libxext-dev
                      - libxi-dev
                      - libxinerama-dev
                      - make
                      - g++-mingw-w64
                      - gcc-mingw-w64
                      - binutils-mingw-w64
                      - libz-mingw-w64-dev
          branches:
              only:
                  - master
          script:
              - x86_64-w64-mingw32-gcc -v && x86_64-w64-mingw32-g++ -v
              - mkdir build_crosscompile_linux_to_windows_gcc
              - cd build_crosscompile_linux_to_windows_gcc
              - echo "Running cmake for MinGW-w64 GCC cross compiler"
              - cmake .. -DCMAKE_TOOLCHAIN_FILE=../w64.cmake
              - make -j 4
