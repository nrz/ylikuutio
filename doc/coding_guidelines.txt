Ylikuutio source code guidelines

Ylikuutio attempts to follow these code guidelines.

Source code style
* In this document backticks refer to code.
* Use Allman style for all code.
* Use 4 spaces for indentation. Do not use tabs.
* C++ header files `*.hpp`, C++ implementation files `*.cpp`.
* If needed: C header files `*.h`, C implementation files `*.c`.

if (true)
{
    std::cout << "Hello!\n";
}
else
{
    std::cout << "What happened?\n";
}

General
* Do not use `using namespace std`.
  Use the full name for standard library functions
  and objects like `std::cout`.
* Do not define multiple variables on the same line.
* The asterisk belongs to the type: `char* foo`.
* Prefer `uint8_t` to `unsigned char`.
* Prefer `int32_t` to `int`.
* Prefer `int64_t` to `long long`.
* Prefer `uint32_t` to `unsigned int`.
* Prefer `uint64_t` to `unsigned long long`.
* Use `std::size_t` variables for file size variables.
  Do not expect that any file is smaller than 4 GiB.
* Do not expect any size for any C++ standard variable type.
  Always cast when converting e.g. `int` to `int32_t`.
* Always set sane default values for member variables of `struct`s
  passed as function parameters.
* Prefer `typedef struct MyStruct` to repeating `struct MyStruct`.
* Try to keep source code headers clear of code. Unfortunately,
  function templates and delegating constructors need to be in headers.
* Avoid polluting the global namespace. Use your own `namespace`.
* Use class names without namespace where appropriate. This is to make lines shorter.
* Prefer virtual functions to function templates.
  Use function templates where needed e.g. for speed.
* Prefer `std::unique_ptr` and `std::make_unique` to raw pointers.
* Prefer references to pointers.
* If the lifetime of a pointer may extend beyond the lifetime of the
  referenced Entity, or if the user may be able to define the value of
  the pointer, then the existence of the referenced Entity must be confirmed
  by finding a matching memory address in some trusted data structure,
  e.g. in a child pointer vector, or in the `entity_map` of the `Universe`.
* Use `const` for variables and member functions wherever it's appropriate.
* Avoid `const_cast`, unless it is absolutely necessary and you know what you are doing.
* For function parameters always use `const std::string&` instead of `std::string`, if possible.
* For function parameters always use `const FooStruct&` instead of `FooStruct`, if possible.
* For function parameters prefer `const FooStruct&` instead of more than 5 parameters.
* Consider 6 parameters as the upper bound of number of function parameters at least for
  realtime functions. In System V ABI up to 6 first integer parameters are passed in registers.
* Maintaining compatibility with 32-bit systems is not a priority.
* Minimize the use of `new` and `delete`.
* Keep member variables in variable size order, biggest first, smallest last, to minimize
  the need for filler bytes for alignment, in particular for variable sizes less than 64 bits.
* Write getters and setters where appropriate.
* Keep both getters and setters in the same order as member variables.
* Keep each getter immediately before the corresponding setter.
* For `yli::ontology`, write factory functions in `EntityFactory`.
* If a constructor is to be called only from a creator function belonging
  to a `friend` class, then the constructor should be made `private`.
* Explicit default construction of base classes is not necessary.
* Do not use `malloc` or `free`, unless absolutely necessary.
* Use include guards in all header files, immediately after the license text.
* The name of the include guard macro shall be e.g. `__FILE_HPP_INCLUDED` for `file.hpp`.
* Besides includes guards, minimize the use of proprocessor code.
* When testing of `private` members (e.g. vertices or normals) is needed,
  provide them using a function which returns a `const` reference to those.
* In code that processes Entities of more than 1 `yli::ontology` class, e.g. in `AnyValue`,
  process the different Entity classes everywhere in the canonical order defined in
  `yli::common::Datatype`, unless there is a reason to do otherwise, e.g. efficiency.

Including files
* Always directly `#include` everything what is needed in the compilation
  unit. Do not expect any `#include`d file to `#include` anything.
* Always use forward reference instead of `#include`, if possible.
* In general, the `#include` order shall be as follows:
  1a. The corresponding header file (for implementation files).
  1b. The headers of the inherited class files (for header files).
  2. Other headers of the same `namespace`.
  3. The headers of the other namespaces, in the alphabetical order of the namespaces.
  4. Third-party libraries.
  5. Standard libraries (in alphabetical order).
* For `yli::ontology` files, the headers of same `namespace` shall be in
  the following order:
  2.01. `registry.hpp`
  2.02. `child_module.hpp`
  2.03. specialized child modules in their classes' canonical order
  2.04. `generic_parent_module.hpp`
  2.05. specialized parent modules in their classes' canonical order
  2.06. `apprentice_module.hpp`
  2.07. specialized apprentice modules in their classes' canonical order
  2.08. `generic_master_module.hpp`
  2.09. specialized master modules in their classes' canonical order
  2.10. The rest `yli::ontology` headers in the canonical order (`yli::data::Datatype`).

Forward declarations
* Always have a forward declaration for all classes and structs that are needed
  in the compilation unit and do not have their header files included.
* Forward declarations follow the same ordering rules as `#include` lines.

Naming
* Use PascalCase for class names: `class MyClass;`.
* Parts of class names separated by uppercase characters should reflect
  a functionality or a subsystem. Therefore, `ShapeshifterTransformation`, not
  `ShapeShifterTransformation`, because `ShapeshifterTransformation` is not
  related to any general 'shifting' functionality or subsystem, but it is
  related to the 'shapeshifting' functionality.
* An exception to the above rule are suffixes that mark the number of dimensions
  involved such as  `2d`, `3d` and `4d`. These suffixes may appear
  in the end of the class name, such as `Text2d` and `Text3d`.
* Use snake_case for variable names: `std::string my_string`.
* An exception to the above rule is `ID` suffix that marks that the
  variable in an ID of an `Entity`, e.g. `childID`, `biontID`, `apprenticeID`.
  However, use `_id` for OpenGL variables not related to the ID's of the Entities,
  e.g. `program_id`, `light_id`. This makes it easier to distinguish between ID's
  and indexes (see the next rule about Levenshtein distance).
* Try to keep Levenshtein distance of at least 2 between different names
  visible in the same scope, but do not add junk characters to
  the variable names just because of this. For example,
  `entity_1` & `entity_2` is OK, when the names are reasonable for the context.
* Use 2-level nested namespaces for Ylikuutio code, such as `yli::ontology`.
* All Ylikuutio code should be under the namespaces under `yli` namespace.
* Prefer single words in namespaces names, but use snake_case
  when multiple words are needed.
* Use snake_case for namespace names: `std::string my_string`.
* Write acronyms properly with either upper or lowercase: `class AI;`, `yli::ontology::AI* ai`.
* Use snake_case in all function names.
* Class names in function names should be in snake_case as well,
  e.g. `create_holobiont`, `create_setting`.
* Acronyms, file formats, etc. in function names should be
  in snake_case as well, e.g. `load_bmp_file`.
* Use snake_case also for variable names with dimensionality suffixes,
  e.g. `my_font_2d`.
* Separate numbers in variable names with an underscore, e.g.
  e.g. `entity_1` and `entity_1_name`.
* Test source code files shall be named `test_foo.cpp`, where `foo.cpp`
  (or `foo.hpp` for templates) is the filename of the source code file to be tested.
* When the test or tests are not specific to any particular source code file,
  then the test source code file shall be named `test_foo.cpp`, where
  `foo` is the topic (e.g. namespace as in `test_triangulation.cpp`).

Security-related
* Do not make any assumptions that input is valid or sensible.
* Consider shaders as input. Do not assume that shaders are valid.
* Do not make any assumptions about the size of the input.
* Do not make any assumptions about undefined behavior.
* Always `return` a value from non-`void` functions.
  Failing to `return` a value from a non-`void` function may cause crash
  (at least in Windows).
  See commit b0bd1607bace941bb42088e1d56aaa38b166c97e for an example.
* Avoid void pointers (`void*`).
* Aim for stability. Code defensively.
* Avoid libraries with known vulnerabilities.
* Do not implement direct support for unnecessary file formats. Instead
  write preprocessing scripts that implement the needed preprocessing
  using established 3D party software such as Blender for converting
  .blend files into FBX file format. These preprocessing scripts are not
  considered part of Ylikuutio itself and may have a different license.

Real-time-code specific issues
* In real-time code, prefer 32-bit variables (due to speed on amd64).
* In real-time code, use 64-bit variables if needed.
* In real-time code, avoid 8-bit and 16-bit variables when possible.
* Think about Big O notation before writing any real-time code.
* Think about CPU caches before writing any real-time code.
* Think about OpenGL state changes before writing any real-time code.
* Avoid void pointers (`void*`) where possible, but not at the cost of speed of real-time code.

Building
* Avoid large libraries. Try to keep build times reasonable.
* All code should compile with both GCC and Clang in amd64 Debian bookworm.
* All code should crosscompile with MinGW-GCC from amd64 Debian bookworm
  to a 64-bit Windows (Google Test unfortunately does not).
* All code should compile with both GCC and Clang in GitHub Actions Ubuntu runner.
* All code should compile with AppleClang in GitHub Actions MacOS runner.
* All code should compile in one `cmake .. && make` run.
