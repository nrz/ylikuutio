name: build-and-test
on: [push]
jobs:
  build-and-test-on-ubuntu-gcc-native-compiler:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - run: sudo apt-get install -y cmake build-essential libx11-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev libsdl2-dev libxcursor-dev libxrandr-dev libxext-dev libxi-dev libxinerama-dev zlib1g-dev
      - run: gcc -v && g++ -v
      - run: mkdir build_native_gcc
      - run: echo "Running cmake for GCC native compiler"
      - run: CC=$(which gcc) CXX=$(which g++) cmake -Bbuild_native_gcc -DDO_UNIT_TESTS_WITH_GOOGLE_TEST=true
      - run: cmake --build build_native_gcc
      - run: cd build_native_gcc && ./unit_tests_with_googletest
  build-and-test-on-ubuntu-clang-native-compiler:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - run: sudo apt-get install -y cmake build-essential libx11-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev libsdl2-dev libxcursor-dev libxrandr-dev libxext-dev libxi-dev libxinerama-dev zlib1g-dev
      - run: clang -v && clang++ -v
      - run: mkdir build_native_clang
      - run: echo "Running cmake for Clang native compiler"
      - run: CC=$(which clang) CXX=$(which clang++) cmake -Bbuild_native_clang -DDO_UNIT_TESTS_WITH_GOOGLE_TEST=true
      - run: cmake --build build_native_clang
      - run: cd build_native_clang && ./unit_tests_with_googletest
  build-and-test-on-ubuntu-mingw-w64-gcc-crosscompiler:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - run: sudo apt-get install -y cmake build-essential libx11-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev libsdl2-dev libxcursor-dev libxrandr-dev libxext-dev libxi-dev libxinerama-dev zlib1g-dev g++-mingw-w64 gcc-mingw-w64 binutils-mingw-w64 libz-mingw-w64-dev
      - run: x86_64-w64-mingw32-gcc -v && x86_64-w64-mingw32-g++ -v
      - run: mkdir build_crosscompile_linux_to_windows_gcc
      - run: echo "Running cmake for MinGW-w64 GCC cross compiler"
      - run: cmake -Bbuild_crosscompile_linux_to_windows_gcc -DDIRECTX=FALSE -DCMAKE_TOOLCHAIN_FILE=w64.cmake
      - run: cmake --build build_crosscompile_linux_to_windows_gcc
  build-and-test-on-macos:
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - run: clang -v && clang++ -v
      - run: mkdir build_native_clang
      - run: echo "Running cmake for Clang native compiler"
      - run: CC=$(which clang) CXX=$(which clang++) cmake -Bbuild_native_clang
      - run: cmake --build build_native_clang
  run-sonar-cloud-on-ubuntu:
    runs-on: ubuntu-22.04
    env:
      SONAR_SCANNER_VERSION: 4.7.0.2747
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH
      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
            curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
            unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
            echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH
      - name: Run build-wrapper
        run: |
          sudo apt-get install -y cmake build-essential libx11-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev libsdl2-dev libxcursor-dev libxrandr-dev libxext-dev libxi-dev libxinerama-dev zlib1g-dev
          clang -v && clang++ -v
          mkdir build_native_clang
          CC=$(which clang) CXX=$(which clang++) cmake -S . -B build_native_clang -DDO_UNIT_TESTS_WITH_GOOGLE_TEST=false
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build_native_clang/ --config Release
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
            sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
