name: build-and-test
on: [push]
jobs:
  build-and-test-on-ubuntu-gcc-native-compiler:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: sudo apt install cmake build-essential libx11-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev libsdl2-dev libvulkan-dev libxcursor-dev libxrandr-dev libxext-dev libxi-dev libxinerama-dev vulkan-validationlayers-dev zlib1g-dev
      - run: gcc -v && g++ -v
      - run: mkdir build_native_gcc
      - run: echo "Running cmake for GCC native compiler"
      - run: CC=$(which gcc) CXX=$(which g++) cmake -Bbuild_native_gcc -DDO_UNIT_TESTS_WITH_GOOGLE_TEST=true
      - run: cmake --build build_native_gcc
      - run: cd build_native_gcc && ./test_ylikuutio && ./test_avaruus
  build-and-test-on-ubuntu-clang-native-compiler:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: sudo apt install cmake build-essential libx11-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev libsdl2-dev libvulkan-dev libxcursor-dev libxrandr-dev libxext-dev libxi-dev libxinerama-dev vulkan-validationlayers-dev zlib1g-dev
      - run: wget https://apt.llvm.org/llvm.sh
      - run: chmod +x ./llvm.sh
      - run: sudo ./llvm.sh 17
      - run: clang-17 -v && clang++-17 -v
      - run: mkdir build_native_clang
      - run: echo "Running cmake for Clang native compiler"
      - run: CC=$(which clang-17) CXX=$(which clang++-17) cmake -Bbuild_native_clang -DDO_UNIT_TESTS_WITH_GOOGLE_TEST=true
      - run: cmake --build build_native_clang
      - run: cd build_native_clang && ./test_ylikuutio && ./test_avaruus
  build-and-test-on-ubuntu-mingw-w64-gcc-crosscompiler:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: sudo apt install cmake build-essential libx11-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev libsdl2-dev libvulkan-dev libxcursor-dev libxrandr-dev libxext-dev libxi-dev libxinerama-dev vulkan-validationlayers-dev zlib1g-dev g++-mingw-w64 gcc-mingw-w64 binutils-mingw-w64 gfortran-mingw-w64 libz-mingw-w64-dev
      - run: x86_64-w64-mingw32-gcc -v && x86_64-w64-mingw32-g++ -v
      - run: mkdir build_crosscompile_linux_to_windows_gcc
      - run: echo "Running cmake for MinGW-w64 GCC cross compiler"
      - run: cmake -Bbuild_crosscompile_linux_to_windows_gcc -DDIRECTX=FALSE -DCMAKE_TOOLCHAIN_FILE=w64.cmake
      - run: cmake --build build_crosscompile_linux_to_windows_gcc
  build-and-test-on-macos:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: clang -v && clang++ -v
      - run: mkdir build_native_clang
      - run: echo "Running cmake for Clang native compiler"
      - run: CC=$(which clang) CXX=$(which clang++) cmake -Bbuild_native_clang
      - run: cmake --build build_native_clang
  build-and-test-on-windows:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: ilammy/msvc-dev-cmd@v1.4.1
      - run: vcpkg install zlib
      - run: clang -v
      - run: clang++ -v
      - run: mkdir build_native_clang
      - run: echo "Running cmake for Clang native compiler"
      - run: cmake -Bbuild_native_clang
      - run: cmake --build build_native_clang
  run-sonar-cloud-on-ubuntu:
    runs-on: ubuntu-22.04
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install Clang and LLVM (including llvm-cov)
        uses: KyleMayes/install-llvm-action@v1.6.1
        with:
          version: "15.0.6"
      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v2
      - name: Run build-wrapper
        run: |
          sudo apt install cmake build-essential libx11-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev libsdl2-dev libvulkan-dev libxcursor-dev libxrandr-dev libxext-dev libxi-dev libxinerama-dev vulkan-validationlayers-dev zlib1g-dev
          gcc -v && g++ -v
          mkdir build
          CC=$(which gcc) CXX=$(which g++) cmake -S . -B build -DDO_UNIT_TESTS_WITH_GOOGLE_TEST=false
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config Release
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json" --define sonar.projectVersion="0.0.10" # Ylikuutio version
