YliLisp is the scripting language of Ylikuutio.
YliLisp is influenced by Scheme, Common Lisp, C++, and
AngelScript.

Planned features:
* Variables and functions in the same namespace (Lisp-1).
* Mutators marked with `!` like in Scheme, e.g. `set!`.
* Predicates marked with `?` like in Scheme, e.g. `null?`.
* Common function names follow names used by Scheme.
* Object-orientation supported following C++ classes.
* Statically typed: `(define my-number 'uint64 123)`.
* Type conversion must be explicit when precision loss
  or truncation would occur: `(cast my-number 'float)`.
* Functions can be overloaded.
* Struct syntax: `(member (member foo bar) baz)`.
* Struct syntax (syntactic sugar): `foo.bar.baz`
  (whitespace around dot operators is free).
* Indexing syntax: `(nth foo bar)`
* Indexing syntax (syntactic sugar): `foo[bar]`.
  (whitespace around square bracket operators is free).
* All objects, both variables and functions,
  are `yli::ontology::Entity` entities.
* All named `yli::ontology::Entity` entities
  are YliLisp variables.
* YliLisp syntax follows Scheme syntax when possible
  considering other YliLisp design goals.

Planned implementation details:
* Functions are `yli::ontology::LispFunction`,
  which inherits `yli::ontology::Entity`.
* Function overloads are implemented by a
  class template `yli::ontology::LispFunctionOverload`,
  which inherits `yli::ontology::GenericLispFunctionOverload`,
  a non-template class.
* `yli::ontology::GenericLispFunctionOverload` inherits
  `yli::ontology::Entity`.
* Lambda expressions are `yli::ontology::Lambda`,
  which inherits `yli::ontology::Entity`.
* S-expressions are `yli::ontology::Sexp`,
  which inherits `yli::ontology::Entity`.
* Each `yli::ontology::Console` may register
  YliLisp functions into its local context,
  similarly to AngelScript.
* All variables are always available in all contexts.
* Ylikuutio uses an C++ exception handler to handle
  exceptions triggered by execution of YliLisp code.
* When an exception occurs, the effects caused by already
  executed YliLisp code are undone by setting and
  activating the old values stored on each change.

Command examples:
* `(define my-number 'uint64 123)`.
* `(cast my-number 'float)`.

Links:
* https://compilers.iecc.com/crenshaw/
