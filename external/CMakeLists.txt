if(MSVC AND NOT "${MSVC_VERSION}" LESS 1400)
    add_definitions( "/MP" )
endif()

add_definitions(
    -DTW_STATIC
    -DTW_NO_LIB_PRAGMA
    -DTW_NO_DIRECT3D
    -D_CRT_SECURE_NO_WARNINGS
    )

if(NOT (CMAKE_CROSSCOMPILING AND CMAKE_SYSTEM_NAME STREQUAL "Android"))
    # do not try co compile GLEW when targeting Android.
    add_definitions(
        -DGLEW_STATIC
        )
endif()

set(YLI_BULLET_DIRECTORIES
    bullet3/src/
    # bullet3/src/Bullet3OpenCL/
    # bullet3/src/Bullet3OpenCL/Initialize/
    # bullet3/src/Bullet3OpenCL/NarrowphaseCollision/
    # bullet3/src/Bullet3OpenCL/NarrowphaseCollision/kernels/
    # bullet3/src/Bullet3OpenCL/RigidBody/
    # bullet3/src/Bullet3OpenCL/RigidBody/kernels/
    # bullet3/src/Bullet3OpenCL/Raycast/
    # bullet3/src/Bullet3OpenCL/Raycast/kernels/
    # bullet3/src/Bullet3OpenCL/BroadphaseCollision/
    # bullet3/src/Bullet3OpenCL/BroadphaseCollision/kernels/
    # bullet3/src/Bullet3OpenCL/ParallelPrimitives/
    # bullet3/src/Bullet3OpenCL/ParallelPrimitives/kernels/
    bullet3/src/Bullet3Common/
    bullet3/src/Bullet3Common/shared/
    bullet3/src/Bullet3Geometry/
    bullet3/src/BulletCollision/
    bullet3/src/BulletCollision/CollisionDispatch/
    bullet3/src/BulletCollision/CollisionShapes/
    bullet3/src/BulletCollision/NarrowPhaseCollision/
    bullet3/src/BulletCollision/BroadphaseCollision/
    bullet3/src/BulletCollision/Gimpact/
    # bullet3/src/BulletSoftBody/
    # bullet3/src/Bullet3Serialize/
    # bullet3/src/Bullet3Serialize/Bullet2FileLoader/
    # bullet3/src/Bullet3Serialize/Bullet2FileLoader/autogenerated/
    bullet3/src/BulletDynamics/
    # bullet3/src/BulletDynamics/Featherstone/
    bullet3/src/BulletDynamics/Dynamics/
    bullet3/src/BulletDynamics/Vehicle/
    bullet3/src/BulletDynamics/ConstraintSolver/
    bullet3/src/BulletDynamics/Character/
    bullet3/src/BulletDynamics/MLCPSolvers/
    bullet3/src/Bullet3Dynamics/
    bullet3/src/Bullet3Dynamics/ConstraintSolver/
    bullet3/src/Bullet3Dynamics/shared/
    # bullet3/src/LinearMath/
    # bullet3/src/LinearMath/TaskScheduler/
    bullet3/src/Bullet3Collision/
    bullet3/src/Bullet3Collision/BroadPhaseCollision/
    bullet3/src/Bullet3Collision/BroadPhaseCollision/shared/
    bullet3/src/Bullet3Collision/NarrowPhaseCollision/
    bullet3/src/Bullet3Collision/NarrowPhaseCollision/shared/
    bullet3/src/BulletInverseDynamics/
    bullet3/src/BulletInverseDynamics/details/
    # bullet3/src/clew/
    )

# Bullet definitions.
set_property(GLOBAL PROPERTY BULLET_INCLUDE_DIR bullet3/src/)
set_property(GLOBAL PROPERTY BULLET_INCLUDE_DIRS ${YLI_BULLET_DIRECTORIES})

# add_subdirectory(bullet3)
include(add_bullet_library.cmake)

include_directories(
    # asio/asio/include/
    FastNoiseSIMD/
    glm/
    OpenFBX/src/
    pugixml/src/
    ${YLI_BULLET_DIRECTORIES}
    )

if(NOT (CMAKE_CROSSCOMPILING AND CMAKE_SYSTEM_NAME STREQUAL "Android"))
    # do not try co compile GLEW when targeting Android.
    include_directories(
        glew-2.0.0/include/
        )
endif()

# Compile external dependencies

# pugixml
add_subdirectory(pugixml)

if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    if(NOT CROSS_COMPILE_FOR_WINDOWS)
        set(OPENGL_LIBRARY
            ${OPENGL_LIBRARY}
            -lGL -lGLU -lXrandr -lXext -lX11 -lrt
            ${CMAKE_DL_LIBS}
            )
    endif()
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set(OPENGL_LIBRARY
        ${OPENGL_LIBRARY}
        ${CMAKE_DL_LIBS}
        )
endif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

### ASIO ###
# add_subdirectory(asio)

### GLEW ###

if(NOT (CMAKE_CROSSCOMPILING AND CMAKE_SYSTEM_NAME STREQUAL "Android"))
    set(GLEW_SOURCE
        glew-2.0.0/src/glew.c
        )

    set(GLEW_HEADERS
        )

    add_library(GLEW_200 STATIC
        ${GLEW_SOURCE}
        ${GLEW_INCLUDE}
        )

    target_link_libraries(GLEW_200
        ${OPENGL_LIBRARY}
        ${EXTRA_LIBS}
        )
endif()

if(COMPILE_ZLIB_FROM_SOURCE)
    add_subdirectory(zlib)
endif()

if(COMPILE_LIBPNG_FROM_SOURCE)
    add_subdirectory(libpng-1.6.37)
endif()

add_library(miniz STATIC
    OpenFBX/src/miniz.c
    OpenFBX/src/miniz.h
    )
add_library(OpenFBX STATIC
    OpenFBX/src/ofbx.cpp
    OpenFBX/src/ofbx.h
    )
add_dependencies(OpenFBX miniz)
target_link_libraries(OpenFBX miniz)
set_property(TARGET OpenFBX PROPERTY COMPILE_FLAGS "-std=c++14")

if(COMPILE_SDL_FROM_SOURCE)
    add_subdirectory(SDL)
endif()
